{"version":3,"sources":["assets\\Script\\frame\\puremvc\\PureMVC.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\n * PureMVC Standard Framework for TypeScript - Copyright © 2012 Frederic Saunier\n * PureMVC Framework - Copyright © 2006-2012 Futurescale, Inc.\n * All rights reserved.\n * modify by jianfen wu\n */\nmodule PureMVC {\n    \"use strict\";\n    export interface INotifier {\n        sendNotification(name: string, args?: any): void;\n    }\n\n    export interface IObserver {\n        name: string;\n        caller: Object;\n        method: Function;\n        priority: number;\n        receiveOnce: boolean;\n    }\n\n    export interface ICommand extends INotifier {\n        execute(...args: Array<any>): void;\n    }\n\n    export interface IProxy extends INotifier {\n        getProxyName(): string;\n        onRegister(): void;\n        onRemove(): void;\n        setData(data: any): void;\n        getData(): any;\n    }\n    export interface IMediator extends INotifier {\n        getMediatorName(): string;\n        getViewComponent(): any;\n        listNotificationInterests(): void;\n        removeNotificationInterests(): void;\n        handleNotification(name: string, method: Function): void;\n        onRegister(): void;\n        onRemove(): void;\n    }\n\n    export interface IController {\n        executeCommand(name: string, args: any): void;\n        registerCommand(name: string, cls: new () => ICommand): void;\n        removeCommand(name: string): void;\n        retrieveCommand(name: string): new () => ICommand;\n        hasCommand(name: string): boolean;\n    }\n\n    export interface IModel {\n        registerProxy(proxy: IProxy): void;\n        removeProxy(name: string): void;\n        retrieveProxy(name: string): IProxy;\n        hasProxy(name: string): boolean;\n    }\n\n    export interface IView {\n        registerObserver(name: string, method: Function, caller: Object, priority?: number): IObserver;\n        removeObserver(name: string, method: Function, caller: Object): void;\n        notifyCancel(): void;\n        notifyObservers(name: string, args?: any): void;\n        registerMediator(mediator: IMediator): void;\n        removeMediator(name: string): void;\n        retrieveMediator(name: string): IMediator;\n        hasMediator(name: string): boolean;\n    }\n\n    export interface IFacade {\n        registerObserver(name: string, method: Function, caller: Object, priority?: number): void;\n        removeObserver(name: string, method: Function, caller: Object): void;\n        registerCommand(name: string, cls: new () => ICommand): void;\n        removeCommand(name: string): void;\n        hasCommand(name: string): boolean;\n        registerProxy(proxy: IProxy): void;\n        removeProxy(name: string): void;\n        retrieveProxy(name: string): IProxy;\n        hasProxy(name: string): boolean;\n        registerMediator(mediator: IMediator): void;\n        removeMediator(name: string): void;\n        retrieveMediator(name: string): IMediator;\n        hasMediator(name: string): boolean;\n        sendNotification(name: string, args?: any): void;\n        notifyCancel(): void;\n    }\n\n    export class Observer implements IObserver {\n        name: string;\n        caller: Object;\n        method: Function;\n        priority: number;\n        receiveOnce: boolean;\n    }\n\n    export class Notifier {\n        protected facade: IFacade;\n\n        constructor() {\n            this.facade = Facade.getInstance();\n        }\n\n        sendNotification(name: string, args?: any): void {\n            this.facade.sendNotification(name, args);\n        }\n    }\n\n    export class Proxy extends Notifier implements IProxy {\n        private proxyName: string;\n\n        protected data: any;\n\n        constructor(name: string, data?: any) {\n            super();\n            if (name === void 0) {\n                throw Error(\"Invalid Proxy Name\");\n            }\n            this.proxyName = name;\n            if (data !== void 0) {\n                this.data = data;\n            }\n        }\n\n        getProxyName(): string {\n            return this.proxyName || null;\n        }\n\n        onRegister(): void {\n        }\n\n        onRemove(): void {\n        }\n\n        setData(data: any): void {\n            this.data = data;\n        }\n\n        getData(): any {\n            return this.data;\n        }\n    }\n\n    export class Controller implements IController {\n        static readonly SINGLETON_MSG: string = \"Controller singleton already constructed!\";\n        static inst: IController = null;\n\n        private commands: { [name: string]: new () => ICommand } = {};\n\n        constructor() {\n            if (Controller.inst !== null) {\n                throw Error(Controller.SINGLETON_MSG);\n            }\n            Controller.inst = this;\n        }\n\n        executeCommand(name: string, args: any): void {\n            const cls: new () => ICommand = this.commands[name];\n            const command: ICommand = new cls();\n            if (args === void 0) {\n                command.execute.call(command);\n            }\n            else if (args instanceof Array) {\n                command.execute.apply(command, args);\n            }\n            else {\n                command.execute.call(command, args);\n            }\n        }\n\n        registerCommand(name: string, cls: new () => ICommand): void {\n            if (this.hasCommand(name) === true) {\n                throw Error(\"Register Duplicate Command \" + name);\n            }\n            this.commands[name] = cls;\n            View.inst.registerObserver(name, this.executeCommand, this);\n        }\n\n        removeCommand(name: string): void {\n            if (this.hasCommand(name) === false) {\n                throw Error(\"Remove Non-Existent Command \" + name);\n            }\n            delete this.commands[name];\n            View.inst.removeObserver(name, this.executeCommand, this);\n        }\n\n        retrieveCommand(name: string): new () => ICommand {\n            return this.commands[name] || null;\n        }\n\n        hasCommand(name: string): boolean {\n            return this.retrieveCommand(name) != null;\n        }\n    }\n\n    export class Model implements IModel {\n        static readonly SINGLETON_MSG: string = \"Model singleton already constructed!\";\n        static inst: IModel = null;\n\n        private proxies: { [name: string]: IProxy } = {};\n\n        constructor() {\n            if (Model.inst !== null) {\n                throw Error(Model.SINGLETON_MSG);\n            }\n            Model.inst = this;\n        }\n\n        registerProxy(proxy: IProxy): void {\n            const name: string = proxy.getProxyName();\n            if (name === null) {\n                throw Error(\"Register Invalid Proxy\");\n            }\n            if (this.hasProxy(name) === true) {\n                throw Error(\"Register Duplicate Proxy \" + name);\n            }\n            this.proxies[name] = proxy;\n            proxy.onRegister();\n        }\n\n        removeProxy(name: string): void {\n            if (name === void 0) {\n                throw Error(\"Remove Invalid Proxy\");\n            }\n            const proxy: IProxy = this.retrieveProxy(name);\n            if (proxy === null) {\n                throw Error(\"Remove Non-Existent Proxy \" + name);\n            }\n            delete this.proxies[name];\n            proxy.onRemove();\n        }\n\n        retrieveProxy(name: string): IProxy {\n            return this.proxies[name] || null;\n        }\n\n        hasProxy(name: string): boolean {\n            return this.retrieveProxy(name) != null;\n        }\n    }\n\n    export class View implements IView {\n        static readonly SINGLETON_MSG: string = \"View singleton already constructed!\";\n        static inst: IView = null;\n\n        private mediators: { [name: string]: IMediator } = {};\n        private observers: { [name: string]: Array<boolean | IObserver> } = {};\n\n        private isCanceled: boolean = false;\n        private onceObservers: Array<IObserver> = [];\n\n        constructor() {\n            if (View.inst !== null) {\n                throw Error(View.SINGLETON_MSG);\n            }\n            View.inst = this;\n        }\n\n        /**\n         * @receiveOnce: 是否只响应一次，默认为false\n         * @priority: 优先级，优先响应级别高的消息，值越大，级别越高，默认为1\n         */\n        registerObserver(name: string, method: Function, caller: Object, priority: number = 1): IObserver {\n            if (name === void 0) {\n                throw Error(\"Register Invalid Observer\");\n            }\n            if (method === void 0) {\n                throw Error(\"Register Invalid Observer Method\");\n            }\n            let observers: Array<boolean | IObserver> = this.observers[name];\n            // 若列表不存在，则新建\n            if (observers === void 0) {\n                observers = this.observers[name] = [false];\n            }\n            // 若当前禁止直接更新，则复制列表\n            else if (observers[0] === true) {\n                observers = this.observers[name] = observers.concat();\n                // 新生成的列表允许被更新\n                observers[0] = false;\n            }\n\n            let index: number = -1;\n            for (let i: number = 1; i < observers.length; i++) {\n                const observer: IObserver = observers[i] as IObserver;\n                if (observer.method === method && observer.caller === caller) {\n                    return null;\n                }\n                // 优先级高的命令先执行\n                if (index === -1 && observer.priority < priority) {\n                    index = i;\n                }\n            }\n\n            const observer: IObserver = new Observer();\n            observer.name = name;\n            observer.caller = caller;\n            observer.method = method;\n            observer.priority = priority;\n            if (index < 0) {\n                observers.push(observer);\n            }\n            else {\n                observers.splice(index, 0, observer);\n            }\n            return observer;\n        }\n\n        removeObserver(name: string, method: Function, caller: Object): void {\n            if (name === void 0) {\n                throw Error(\"Remove Invalid Observer\");\n            }\n            if (method === void 0) {\n                throw Error(\"Remove Invalid Observer Method\");\n            }\n            let observers: Array<boolean | IObserver> = this.observers[name];\n            // 无此类事件\n            if (observers === void 0) {\n                return;\n            }\n            // 若当前禁止直接更新，则复制列表\n            if (observers[0] === true) {\n                observers = this.observers[name] = observers.concat();\n                // 新生成的列表允许被更新\n                observers[0] = false;\n            }\n            for (let i: number = 1; i < observers.length; i++) {\n                const observer: IObserver = observers[i] as IObserver;\n                if (observer.method === method && observer.caller === caller) {\n                    observers.splice(i, 1);\n                    break;\n                }\n            }\n            // 移除空列表\n            if (observers.length === 1) {\n                delete this.observers[name];\n            }\n        }\n\n        notifyCancel(): void {\n            this.isCanceled = true;\n        }\n\n        notifyObservers(name: string, args?: any): void {\n            if (name === void 0) {\n                throw Error(\"Notify Invalid Command\");\n            }\n            const observers: Array<boolean | IObserver> = this.observers[name];\n            // 无此类事件\n            if (observers === void 0) {\n                return;\n            }\n            // 标记禁止更新\n            observers[0] = true;\n\n            for (let i: number = 1; i < observers.length; i++) {\n                const observer: IObserver = observers[i] as IObserver;\n                if (observer.caller === Controller.inst) {\n                    observer.method.call(observer.caller, name, args);\n                }\n                else if (args === void 0) {\n                    observer.method.call(observer.caller);\n                }\n                else if (args instanceof Array) {\n                    observer.method.apply(observer.caller, args);\n                }\n                else {\n                    observer.method.call(observer.caller, args);\n                }\n            }\n            // 标记允许直接更新\n            observers[0] = false;\n        }\n\n        registerMediator(mediator: IMediator): void {\n            const name: string = mediator.getMediatorName();\n            if (name === null) {\n                throw Error(\"Register Invalid Mediator\");\n            }\n            if (this.hasMediator(name) === true) {\n                throw Error(\"Register Duplicate Mediator \" + name);\n            }\n            this.mediators[name] = mediator;\n            mediator.listNotificationInterests();\n            mediator.onRegister();\n        }\n\n        removeMediator(name: string): void {\n            if (name === void 0) {\n                throw Error(\"Remove Invalid Mediator\");\n            }\n            const mediator: IMediator = this.retrieveMediator(name);\n            if (mediator === null) {\n                throw Error(\"Remove Non-Existent Mediator \" + name);\n            }\n            delete this.mediators[name];\n            mediator.removeNotificationInterests();\n            mediator.onRemove();\n        }\n\n        retrieveMediator(name: string): IMediator {\n            return this.mediators[name] || null;\n        }\n\n        hasMediator(name: string): boolean {\n            return this.retrieveMediator(name) != null;\n        }\n    }\n\n    export class Mediator extends Notifier implements IMediator {\n        private mediatorName: string;\n        private notificationInterests: Array<IObserver> = [];\n\n        protected viewComponent: any;\n\n        constructor(name: string, viewComponent?: any) {\n            super();\n            if (name === void 0) {\n                throw Error(\"Invalid Mediator Name\");\n            }\n            if (viewComponent === void 0) {\n                throw Error(\"Invalid View Component\");\n            }\n            this.mediatorName = name;\n            if (viewComponent !== void 0) {\n                this.viewComponent = viewComponent;\n            }\n        }\n\n        getMediatorName(): string {\n            return this.mediatorName || null;\n        }\n\n        getViewComponent(): any {\n            return this.viewComponent;\n        }\n\n        listNotificationInterests(): void {\n        }\n\n        removeNotificationInterests(): void {\n            for (let i: number = 0; i < this.notificationInterests.length; i++) {\n                const observer: IObserver = this.notificationInterests[i];\n                View.inst.removeObserver(observer.name, observer.method, observer.caller);\n            }\n        }\n\n        handleNotification(name: string, method: Function): void {\n            const observer: IObserver = View.inst.registerObserver(name, method, this);\n            observer && this.notificationInterests.push(observer);\n        }\n\n        onRegister(): void {\n        }\n\n        onRemove(): void {\n        }\n    }\n\n    export class Facade implements IFacade {\n        static readonly SINGLETON_MSG: string = \"Facade singleton already constructed!\";\n        static inst: IFacade = null;\n\n        static getInstance(): IFacade {\n            if (Facade.inst === null) {\n                Facade.inst = new Facade();\n            }\n            return Facade.inst;\n        }\n\n        private view: IView = new View();\n        private model: IModel = new Model();\n        private controller: IController = new Controller();\n\n        constructor() {\n            if (Facade.inst !== null) {\n                throw Error(Facade.SINGLETON_MSG);\n            }\n            Facade.inst = this;\n            this.initializeFacade();\n        }\n\n        private initializeFacade(): void {\n            this.initializeModel();\n            this.initializeView();\n            this.initializeController();\n        }\n\n        protected initializeModel(): void {\n\n        }\n\n        protected initializeView(): void {\n\n        }\n\n        protected initializeController(): void {\n\n        }\n\n        registerObserver(name: string, method: Function, caller: Object, priority?: number): void {\n            this.view.registerObserver(name, method, caller, priority);\n        }\n\n        removeObserver(name: string, method: Function, caller: Object): void {\n            this.view.removeObserver(name, method, caller);\n        }\n\n        registerCommand(name: string, cls: new () => ICommand): void {\n            this.controller.registerCommand(name, cls);\n        }\n\n        removeCommand(name: string): void {\n            this.controller.removeCommand(name);\n        }\n\n        hasCommand(name: string): boolean {\n            return this.controller.hasCommand(name);\n        }\n\n        registerProxy(proxy: IProxy): void {\n            this.model.registerProxy(proxy);\n        }\n\n        removeProxy(name: string): void {\n            this.model.removeProxy(name);\n        }\n\n        retrieveProxy(name: string): IProxy {\n            return this.model.retrieveProxy(name);\n        }\n\n        hasProxy(name: string): boolean {\n            return this.model.hasProxy(name);\n        }\n\n        registerMediator(mediator: IMediator): void {\n            this.view.registerMediator(mediator);\n        }\n\n        removeMediator(name: string): void {\n            this.view.removeMediator(name);\n        }\n\n        retrieveMediator(name: string): IMediator {\n            return this.view.retrieveMediator(name);\n        }\n\n        hasMediator(name: string): boolean {\n            return this.view.hasMediator(name);\n        }\n\n        sendNotification(name: string, args?: any): void {\n            this.view.notifyObservers(name, args);\n        }\n\n        notifyCancel(): void {\n            this.view.notifyCancel();\n        }\n    }\n\n    export abstract class MacroCommand extends Notifier implements ICommand {\n        private commands: Array<new () => ICommand> = [];\n\n        constructor() {\n            super();\n            this.initializeMacroCommand();\n        }\n\n        abstract initializeMacroCommand(): void;\n\n        addSubCommand(cls: new () => ICommand): void {\n            this.commands.push(cls);\n        }\n\n        execute(): void {\n            for (let i: number = 0; i < this.commands.length; i++) {\n                const cls: new () => ICommand = this.commands[i];\n                const command: ICommand = new cls();\n                command.execute.apply(command, arguments);\n            }\n        }\n    }\n\n    export abstract class SimpleCommand extends Notifier implements ICommand {\n\n        abstract execute(...args: Array<any>): void;\n    }\n}\n"]}